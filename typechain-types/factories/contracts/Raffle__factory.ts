/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinator",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "bytes32",
        name: "gasLane",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "callBackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughETH",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpkeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayers",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestConfirmation",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101406040523480156200001257600080fd5b50604051620017e2380380620017e283398181016040528101906200003891906200029e565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508573ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff1660601b815250508467ffffffffffffffff1660c08167ffffffffffffffff1660c01b815250508360e081815250508260a081815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360018111156200011957620001186200033a565b5b0217905550806003819055504260028190555050505050505062000369565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016a826200013d565b9050919050565b6200017c816200015d565b81146200018857600080fd5b50565b6000815190506200019c8162000171565b92915050565b600067ffffffffffffffff82169050919050565b620001c181620001a2565b8114620001cd57600080fd5b50565b600081519050620001e181620001b6565b92915050565b6000819050919050565b620001fc81620001e7565b81146200020857600080fd5b50565b6000815190506200021c81620001f1565b92915050565b6000819050919050565b620002378162000222565b81146200024357600080fd5b50565b60008151905062000257816200022c565b92915050565b600063ffffffff82169050919050565b62000278816200025d565b81146200028457600080fd5b50565b60008151905062000298816200026d565b92915050565b60008060008060008060c08789031215620002be57620002bd62000138565b5b6000620002ce89828a016200018b565b9650506020620002e189828a01620001d0565b9550506040620002f489828a016200020b565b94505060606200030789828a0162000246565b93505060806200031a89828a0162000287565b92505060a06200032d89828a0162000246565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160c01c60e0516101005160601c6101205160e01c61140f620003d360003960006106b70152600061063701526000610673015260006106940152600081816102fa0152610409015260008181610349015261039d015261140f6000f3fe6080604052600436106100c25760003560e01c8063460e20491161007f5780636e04ff0d116100595780636e04ff0d1461023757806391ad27b414610275578063ca6a9ef8146102a0578063fd6673f5146102cb576100c2565b8063460e2049146101a4578063473f1ddc146101e157806353a2c19a1461020c576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc53914610146578063320229eb146101505780634585e33b1461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bd8565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610bd8565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610d8c565b610347565b005b61014e610407565b005b34801561015c57600080fd5b50610165610576565b6040516101729190610bd8565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610e43565b610580565b005b3480156101b057600080fd5b506101cb60048036038101906101c69190610e90565b61077f565b6040516101d89190610efe565b60405180910390f35b3480156101ed57600080fd5b506101f66107c6565b6040516102039190610efe565b60405180910390f35b34801561021857600080fd5b506102216107f0565b60405161022e9190610bd8565b60405180910390f35b34801561024357600080fd5b5061025e60048036038101906102599190610fce565b6107ff565b60405161026c9291906110ba565b60405180910390f35b34801561028157600080fd5b5061028a6108c8565b6040516102979190610bd8565b60405180910390f35b3480156102ac57600080fd5b506102b56108d2565b6040516102c29190611107565b60405180910390f35b3480156102d757600080fd5b506102e06108db565b6040516102ed9190610bd8565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16600181111561034257610341611122565b5b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103f0929190611151565b60405180910390fd5b61040382826108e7565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610461576040517f9894879b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561047557610474611122565b5b600160149054906101000a900460ff16600181111561049757610496611122565b5b146104ce576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b600061059a604051806020016040528060008152506107ff565b509050806106095747600080549050600160149054906101000a900460ff1660018111156105cb576105ca611122565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016106009392919061117a565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561062e5761062d611122565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106f895949392919061120c565b602060405180830381600087803b15801561071257600080fd5b505af1158015610726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a9190611274565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b6000808281548110610794576107936112a1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60006060600080600181111561081857610817611122565b5b600160149054906101000a900460ff16600181111561083a57610839611122565b5b14905060006003546002544261085091906112ff565b119050600080600080549050119050600080471190508380156108705750825b80156108795750815b80156108825750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b6000600354905090565b60006003905090565b60008080549050905090565b6000808054905082600081518110610902576109016112a1565b5b60200260200101516109149190611362565b9050600080828154811061092b5761092a6112a1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109bf906113c4565b60006040518083038185875af1925050503d80600081146109fc576040519150601f19603f3d011682016040523d82523d6000602084013e610a01565b606091505b505090506000600160146101000a81548160ff02191690836001811115610a2b57610a2a611122565b5b0217905550600067ffffffffffffffff811115610a4b57610a4a610c49565b5b604051908082528060200260200182016040528015610a795781602001602082028036833780820191505090505b5060009080519060200190610a8f929190610b18565b504260028190555080610ace576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b91579160200282015b82811115610b905782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b38565b5b509050610b9e9190610ba2565b5090565b5b80821115610bbb576000816000905550600101610ba3565b5090565b6000819050919050565b610bd281610bbf565b82525050565b6000602082019050610bed6000830184610bc9565b92915050565b6000604051905090565b600080fd5b600080fd5b610c1081610bbf565b8114610c1b57600080fd5b50565b600081359050610c2d81610c07565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c8182610c38565b810181811067ffffffffffffffff82111715610ca057610c9f610c49565b5b80604052505050565b6000610cb3610bf3565b9050610cbf8282610c78565b919050565b600067ffffffffffffffff821115610cdf57610cde610c49565b5b602082029050602081019050919050565b600080fd5b6000610d08610d0384610cc4565b610ca9565b90508083825260208201905060208402830185811115610d2b57610d2a610cf0565b5b835b81811015610d545780610d408882610c1e565b845260208401935050602081019050610d2d565b5050509392505050565b600082601f830112610d7357610d72610c33565b5b8135610d83848260208601610cf5565b91505092915050565b60008060408385031215610da357610da2610bfd565b5b6000610db185828601610c1e565b925050602083013567ffffffffffffffff811115610dd257610dd1610c02565b5b610dde85828601610d5e565b9150509250929050565b600080fd5b60008083601f840112610e0357610e02610c33565b5b8235905067ffffffffffffffff811115610e2057610e1f610de8565b5b602083019150836001820283011115610e3c57610e3b610cf0565b5b9250929050565b60008060208385031215610e5a57610e59610bfd565b5b600083013567ffffffffffffffff811115610e7857610e77610c02565b5b610e8485828601610ded565b92509250509250929050565b600060208284031215610ea657610ea5610bfd565b5b6000610eb484828501610c1e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ee882610ebd565b9050919050565b610ef881610edd565b82525050565b6000602082019050610f136000830184610eef565b92915050565b600080fd5b600067ffffffffffffffff821115610f3957610f38610c49565b5b610f4282610c38565b9050602081019050919050565b82818337600083830152505050565b6000610f71610f6c84610f1e565b610ca9565b905082815260208101848484011115610f8d57610f8c610f19565b5b610f98848285610f4f565b509392505050565b600082601f830112610fb557610fb4610c33565b5b8135610fc5848260208601610f5e565b91505092915050565b600060208284031215610fe457610fe3610bfd565b5b600082013567ffffffffffffffff81111561100257611001610c02565b5b61100e84828501610fa0565b91505092915050565b60008115159050919050565b61102c81611017565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561106c578082015181840152602081019050611051565b8381111561107b576000848401525b50505050565b600061108c82611032565b611096818561103d565b93506110a681856020860161104e565b6110af81610c38565b840191505092915050565b60006040820190506110cf6000830185611023565b81810360208301526110e18184611081565b90509392505050565b600061ffff82169050919050565b611101816110ea565b82525050565b600060208201905061111c60008301846110f8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006040820190506111666000830185610eef565b6111736020830184610eef565b9392505050565b600060608201905061118f6000830186610bc9565b61119c6020830185610bc9565b6111a96040830184610bc9565b949350505050565b6000819050919050565b6111c4816111b1565b82525050565b600067ffffffffffffffff82169050919050565b6111e7816111ca565b82525050565b600063ffffffff82169050919050565b611206816111ed565b82525050565b600060a08201905061122160008301886111bb565b61122e60208301876111de565b61123b60408301866110f8565b61124860608301856111fd565b61125560808301846111fd565b9695505050505050565b60008151905061126e81610c07565b92915050565b60006020828403121561128a57611289610bfd565b5b60006112988482850161125f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061130a82610bbf565b915061131583610bbf565b925082821015611328576113276112d0565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061136d82610bbf565b915061137883610bbf565b92508261138857611387611333565b5b828206905092915050565b600081905092915050565b50565b60006113ae600083611393565b91506113b98261139e565b600082019050919050565b60006113cf826113a1565b915081905091905056fea26469706673582212204315131c8122eee7e404509f714d100167ca8f57ac132bab1017426883c1ea1764736f6c63430008080033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vrfCoordinator: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    entranceFee: PromiseOrValue<BigNumberish>,
    callBackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(
      vrfCoordinator,
      subscriptionId,
      gasLane,
      entranceFee,
      callBackGasLimit,
      interval,
      overrides || {}
    ) as Promise<Raffle>;
  }
  override getDeployTransaction(
    vrfCoordinator: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    entranceFee: PromiseOrValue<BigNumberish>,
    callBackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vrfCoordinator,
      subscriptionId,
      gasLane,
      entranceFee,
      callBackGasLimit,
      interval,
      overrides || {}
    );
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
